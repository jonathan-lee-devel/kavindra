name: Deploy Production
on:
  push:
    branches: [main]

permissions:
  contents: read
  pull-requests: read

jobs:
  lint-backend:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        node-version: [20.x]
    name: Lint Backend (v${{ matrix.node-version }})
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn
          cache-dependency-path: '**/yarn.lock'
      - run: yarn install --frozen-lockfile
        working-directory: ./kavindra-api
      - name: Lint (v${{ matrix.node-version }})
        working-directory: ./kavindra-api
        run: yarn run lint

  build-backend:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        node-version: [20.x]
    name: Build Backend (v${{ matrix.node-version }})
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn
          cache-dependency-path: '**/yarn.lock'
      - run: yarn install --frozen-lockfile
        working-directory: ./kavindra-api
      - name: Build (v${{ matrix.node-version }})
        working-directory: ./kavindra-api
        run: yarn run build

  test-backend:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        node-version: [20.x]
    name: Test Backend (v${{ matrix.node-version }})
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn
          cache-dependency-path: '**/yarn.lock'
      - run: yarn install --frozen-lockfile
        working-directory: ./kavindra-api
      - name: Test (v${{ matrix.node-version }})
        working-directory: ./kavindra-api
        run: yarn run test
        env:
          STRIPE_API_KEY: ${{ secrets.STRIPE_API_KEY }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          FRONT_END_URLS: ${{ secrets.FRONT_END_URL }}
          NODE_ENV: ${{ secrets.NODE_ENV }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_PUBLIC_KEY: ${{ secrets.SUPABASE_PUBLIC_KEY }}
          SUPABASE_JWT_SECRET: ${{ secrets.SUPABASE_JWT_SECRET }}
          SUPABASE_SECRET_KEY: ${{ secrets.SUPABASE_SECRET_KEY }}

  lint-frontend:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        node-version: [20.x]
    name: Lint Frontend (v${{ matrix.node-version }})
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn
          cache-dependency-path: '**/yarn.lock'
      - run: yarn install --frozen-lockfile
        working-directory: ./kavindra-ui
      - name: Lint (v${{ matrix.node-version }})
        working-directory: ./kavindra-ui
        run: yarn run lint

  build-frontend:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        node-version: [20.x]
    name: Build Frontend (v${{ matrix.node-version }})
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn
          cache-dependency-path: '**/yarn.lock'
      - run: yarn install --frozen-lockfile
        working-directory: ./kavindra-ui
      - name: Build Staging (v${{ matrix.node-version }})
        working-directory: ./kavindra-ui
        run: yarn run build:stage
      - name: Build (v${{ matrix.node-version }})
        working-directory: ./kavindra-ui
        run: yarn run build

  test-frontend:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        node-version: [20.x]
    name: Test Frontend (v${{ matrix.node-version }})
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn
          cache-dependency-path: '**/yarn.lock'
      - run: yarn install --frozen-lockfile
        working-directory: ./kavindra-ui
      - name: Test (v${{ matrix.node-version }})
        working-directory: ./kavindra-ui
        run: yarn run test

  deploy-railway-staging:
    needs: [lint-backend, lint-frontend, build-backend, build-frontend, test-backend, test-frontend]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Use Node 20
        uses: actions/setup-node@v1
        with:
          node-version: 20.x
      - name: Install Railway
        run: npm i -g @railway/cli
      - name: Install Backend Packages
        working-directory: ./kavindra-api
        run: yarn install --frozen-lockfile
      - name: Deploy Backend
        working-directory: ./kavindra-api
        run: railway up --service kavindra-api
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_STAGING_TOKEN }}
      - name: Install Frontend Packages
        working-directory: ./kavindra-ui
        run: yarn install --frozen-lockfile
      - name: Deploy Frontend
        run: railway up --service kavindra-ui
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_STAGING_TOKEN }}


  cypress-test:
    needs: [deploy-railway-staging]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20.x
      - name: Install Dependencies
        working-directory: ./kavindra-ui
        run: npm install -g yarn && yarn
      - name: Run Cypress
        working-directory: ./kavindra-ui
        run: yarn run cy:run
